<main class='main-wrap'>
  <section class='content-main'>
    <div class='row'>
      <form
        action='/admin/addproducts'
        method='post'
        enctype='multipart/form-data'
      >
        <div class='col-9'>

          <div class='content-header'>
            <h2 class='content-title'>Add New Product</h2>
            <div>
              {{!-- <button
                class='btn btn-light rounded font-sm mr-5 text-body hover-up'
              >Save to draft</button> --}}
              <button
                class='btn btn-md rounded font-sm hover-up'
                type='submit'
              >Publish</button>
            </div>
          </div>
        </div>
        <div class='col-lg-6'>
          <div class='card mb-4'>
            <div class='card-header'>
              <h6>Details</h6>
            </div>
            <div class='card-body'>

              <div class='mb-4'>
                <label for='product_name' class='form-label'>Product title</label>
                <input
                  type='text'
                  placeholder='Type here'
                  name='name'
                  class='form-control' required
                  id='product_name'
                  />
                  <div class="error-message"></div>
              </div>
              <div class='mb-4'>
                <label class='form-label'>Full description</label>
                <textarea
                  placeholder='Type here'
                  class='form-control'
                  name='description'
                  rows='4'
                ></textarea>
              </div>
              <div class='row'>
                <div class='col-lg-4'>
                  <div class='mb-4'>
                    <label class='form-label'>Regular price</label>
                    <div class='row gx-2'>
                      <input
                        placeholder='â‚¹'
                        name='price'
                        type='text' required
                        class='form-control'
                        
                      /><div class="error-message"></div>
                    </div>
                  </div>
                </div>
                {{! <div class="col-lg-4">
                                        <div class="mb-4">
                                            <label class="form-label">Promotional price</label>
                                            <input placeholder="$" type="text" class="form-control">
                                        </div>
                                    </div> }}
                <div class='col-lg-4'>

                  <label class='form-label'>Status</label>
                  <select class='form-select' name='productStatus'>

                    <option value='true'> Active</option>
                    <option value='false'> Inactive</option>

                  </select>
                </div>
                <div class='col-lg-4'>

                  <label class='form-label'>Category</label>
                  <select class='form-select' name='category' value>
                    {{#each categories}}
                      <option value='{{this._id}}'> {{this.name}} </option>
                    {{/each}}
                  </select>
                </div>
              </div>
               <div class="mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input type="text" placeholder="Quantity" class="form-control" id="product_quantity" required name="quantity">
                                    <div class="error-message"></div>
                                </div>
                                <div class="mb-4">
                                    <label class="form-label">Sizes Available</label>
                                    <input type="text" placeholder="S, M, L, XL" class="form-control" id="product_sizes" name="sizesAvailable">
                                </div><div class="error-message"></div>
                                {{!-- <label class="form-check mb-4">
                                    <input class="form-check-input" type="checkbox" value="">
                                    <span class="form-check-label"> Make a template </span>
                                </label>  --}}

            </div>
          </div>
          <!-- card end// -->
          {{! <div class="card mb-4">
                        <div class="card-header">
                            <h4>Shipping</h4>
                        </div>
                        <div class="card-body">
                            <form>
                                <div class="row">
                                    <div class="col-lg-6">
                                        <div class="mb-4">
                                            <label for="product_name" class="form-label">Width</label>
                                            <input type="text" placeholder="inch" class="form-control" id="product_name">
                                        </div>
                                    </div>
                                    <div class="col-lg-6">
                                        <div class="mb-4">
                                            <label for="product_name" class="form-label">Height</label>
                                            <input type="text" placeholder="inch" class="form-control" id="product_name">
                                        </div>
                                    </div>
                                </div>
                                <div class="mb-4">
                                    <label for="product_name" class="form-label">Weight</label>
                                    <input type="text" placeholder="gam" class="form-control" id="product_name">
                                </div>
                                <div class="mb-4">
                                    <label for="product_name" class="form-label">Shipping fees</label>
                                    <input type="text" placeholder="$" class="form-control" id="product_name">
                                </div>
                            </form>
                        </div>
                    </div> <!-- card end// -->}}
        </div>

        <!------Image Upload-------->


   <div class="d-flex">

            <div class="mt-5  col-md-4">
                <label for="productimage" class="">
                Image
                </label>

                <input type="file" required id="id_image1" name="productImages" accept="image/*" class="form-control"
                onchange="viewImage1(event)" style="width:100%;"><br>
                <img src="" id="imgView1" alt="" class="clr" style="height:100px">

                <div class="vald-info" id="info"></div>
                <h5 class="error_form text-danger" id="image1_error_message"></h5>
                <div style="display:flex">
                <div id="image-box1" class="clr image-container" style="height: 300px; width:20%"></div>
                <button type="button" class="btn btn-outline-info" id="crop-btn1" style=" margin-top: 10px;  display: none;
                                            width:  50% ; margin: 20rem 0rem 0rem 0rem;">Crop</button>
                </div>
            </div>

            <div class="mt-5  col-md-4 ms-3">
                <label for="productimage" class="">
                Image
                </label>
                <input type="file" id="id_image2" required name="productImages" accept="image/*" class="form-control"
                onchange="viewImage2(event)" style="width:100%;"><br>
                <img src="" id="imgView2" class="clr" alt="" style="height:100px">

                <div class="vald-info" id="info"></div>
                <h5 class="error_form text-danger" id="image2_error_message"></h5>
                <div id="image2container" style="display:flex">
                <div id="image-box2" class="image-container clr" style="height: 300px; width:20%"></div>
                <button type="button" class="btn btn-outline-info" id="crop-btn2" style=" margin-top: 10px; display: none;
                                        width:  50% ; margin: 20rem 0rem 0rem 0rem;">Crop</button>
                </div>
            </div>



            <div class="mt-5 col-md-4">
                <label for="productimage" class="">
                Image
                </label>

                <input type="file" required id="id_image3" name="productImages" accept="image/*" class="form-control"
                onchange="viewImage3(event)" style="width:100%; margin-left: 1rem "><br>
                <img src="" id="imgView3" class="clr" alt="" style="height:100px">

                <div class="vald-info" id="info"></div>
                <h5 class="error_form text-danger" id="image3_error_message"></h5>
                <div style="display:flex">
                <div id="image-box3" class="image-container clr" style="height: 300px; width:20%"></div>
                <button type="button" class="btn btn-outline-info" id="crop-btn3" style=" margin-top: 2px; display: none;
                    width:  50% ; margin: 20rem 0rem 0rem 0rem;">Crop</button>
                </div>
            </div>

            </div>


      </form>
    </div>
  </section>
  <!-- content-main end// -->

</main>

<!------JQuery Loading CDN------>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>






{{!-- Cropper --}}

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.min.js"></script>



{{!-- Image Cropping --}}

<script>
  const imagebox1 = document.getElementById('image-box1')
  const crop_btn1 = document.getElementById('crop-btn1')
  const input1 = document.getElementById('id_image1')
  function viewImage1(event) {
    var fileInput1 = document.getElementById('id_image1');
    var filePath1 = fileInput1.value;
    var allowedExtensions =
      /(\.jpg|\.jpeg|\.png|\.gif|\.jfif|\.webp)$/i;
    if (!allowedExtensions.exec(filePath1)) {
      fileInput1.value = '';
      swal("There is a problem!", "Please choose image file.");
      return false;
    } else {
      document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
    }
  }
  // When user uploads the image this event will get triggered
  input1.addEventListener('change', () => {
    // Getting image file object from the input variable
    const img_data1 = input1.files[0]
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url1 = URL.createObjectURL(img_data1)
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox1.innerHTML = `<img src="${url1}" id="image1" style="width:100%;">`
    // Storing that cropping view image in a variable
    const image1 = document.getElementById('image1')
    // Displaying the image box
    document.getElementById('image-box1').style.display = 'block'
    // Displaying the Crop buttton
    document.getElementById('crop-btn1').style.display = 'block'
    document.getElementById('imgView1').style.display = 'block'
    // Hiding the Post button
    const cropper1 = new Cropper(image1, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
      aspectRatio: 1 / 1,
    })
    // When crop button is clicked this event will get triggered
    crop_btn1.addEventListener('click', () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper1.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement1 = document.getElementById('id_image1');
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file1 = new File([blob], img_data1.name, { type: "image/*", lastModified: new Date().getTime() });
        // Create a new container
        let container1 = new DataTransfer();
        // Add the cropped image file to the container
        container1.items.add(file1);
        // Replace the original image file with the new cropped image file
        fileInputElement1.files = container1.files;
        document.getElementById('imgView1').src = URL.createObjectURL(fileInputElement1.files[0])
        // Hide the cropper box
        document.getElementById('image-box1').style.display = 'none'
        // Hide the crop button
        document.getElementById('crop-btn1').style.display = 'none'
      })
    })
  })
  const imagebox2 = document.getElementById('image-box2')
  const crop_btn2 = document.getElementById('crop-btn2')
  const input2 = document.getElementById('id_image2')
  function viewImage2(event) {
    var fileInput2 = document.getElementById('id_image2');
    var filePath2 = fileInput2.value;
    var allowedExtensions =
      /(\.jpg|\.jpeg|\.png|\.gif|\.jfif|\.webp)$/i;
    if (!allowedExtensions.exec(filePath2)) {
      fileInput1.value = '';
      swal("There is a problem!", "Please choose image file.");
      return false;
    } else {
      document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])
    }
  }
  // When user uploads the image this event will get triggered
  input2.addEventListener('change', () => {
    // Getting image file object from the input variable
    const img_data2 = input2.files[0]
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url2 = URL.createObjectURL(img_data2)
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox2.innerHTML = `<img src="${url2}" id="image2" style="width:100%;">`
    // Storing that cropping view image in a variable
    const image2 = document.getElementById('image2')
    // Displaying the image box
    document.getElementById('image-box2').style.display = 'block'
    // Displaying the Crop buttton
    document.getElementById('crop-btn2').style.display = 'block'
    document.getElementById('imgView2').style.display = 'block'
    // Hiding the Post button
    const cropper2 = new Cropper(image2, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
      aspectRatio: 1 / 1,
    })
    // When crop button is clicked this event will get triggered
    crop_btn2.addEventListener('click', () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper2.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement2 = document.getElementById('id_image2');
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file2 = new File([blob], img_data2.name, { type: "image/*", lastModified: new Date().getTime() });
        // Create a new container
        let container2 = new DataTransfer();
        // Add the cropped image file to the container
        container2.items.add(file2);
        // Replace the original image file with the new cropped image file
        fileInputElement2.files = container2.files;
        document.getElementById('imgView2').src = URL.createObjectURL(fileInputElement2.files[0])
        // Hide the cropper box
        document.getElementById('image-box2').style.display = 'none'
        // Hide the crop button
        document.getElementById('crop-btn2').style.display = 'none'
      })
    })
  })
  const imagebox3 = document.getElementById('image-box3')
  const crop_btn3 = document.getElementById('crop-btn3')
  const input3 = document.getElementById('id_image3')
  function viewImage3(event) {
    var fileInput3 = document.getElementById('id_image3');
    var filePath3 = fileInput3.value;
    var allowedExtensions =
      /(\.jpg|\.jpeg|\.png|\.gif|\.jfif|\.webp)$/i;
    if (!allowedExtensions.exec(filePath3)) {
      fileInput3.value = '';
      swal("There is a problem!", "Please choose image file.");
      return false;
    } else {
      document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])
    }
  }
  // When user uploads the image this event will get triggered
  input3.addEventListener('change', () => {
    // Getting image file object from the input variable
    const img_data3 = input3.files[0]
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url3 = URL.createObjectURL(img_data3)
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox3.innerHTML = `<img src="${url3}" id="image3" style="width:100%;">`
    // Storing that cropping view image in a variable
    const image3 = document.getElementById('image3')
    // Displaying the image box
    document.getElementById('image-box3').style.display = 'block'
    // Displaying the Crop buttton
    document.getElementById('crop-btn3').style.display = 'block'
    // Hiding the Post button
    const cropper3 = new Cropper(image3, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
      aspectRatio: 1 / 1,
    })
    // When crop button is clicked this event will get triggered
    crop_btn3.addEventListener('click', () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper3.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement3 = document.getElementById('id_image3');
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file3 = new File([blob], img_data3.name, { type: "image/*", lastModified: new Date().getTime() });
        // Create a new container
        let container3 = new DataTransfer();
        // Add the cropped image file to the container
        container3.items.add(file3);
        // Replace the original image file with the new cropped image file
        fileInputElement3.files = container3.files;
        document.getElementById('imgView3').src = URL.createObjectURL(fileInputElement3.files[0])
        // Hide the cropper box
        document.getElementById('image-box3').style.display = 'none'
        // Hide the crop button
        document.getElementById('crop-btn3').style.display = 'none'
        document.getElementById('imgView3').style.display = 'block'
      })
    })
  })
</script>


{{!-- validation  --}}

 <script>
    // Get the form element
    const form = document.querySelector('form');
 console.log("Form Validation ")
    // Add event listener to the form on submit
    form.addEventListener('submit', function(event) {
      // Prevent form submission
      event.preventDefault();
      // Validate form fields
      console.log("Form Validation ")
const nameInput = document.getElementById('product_name');
const quantityInput = document.getElementById('product_quantity');
const sizesInput = document.getElementById('product_sizes');

// Clear previous error messages
nameInput.classList.remove('is-invalid');
quantityInput.classList.remove('is-invalid');
sizesInput.classList.remove('is-invalid');

// Validate Product Name
if (nameInput.value.trim() === '') {
  nameInput.classList.add('is-invalid');
  nameInput.nextElementSibling.textContent = 'Product title is required.';
  nameInput.focus();
  return;
}

// Validate Quantity
if (quantityInput.value.trim() === '') {
  quantityInput.classList.add('is-invalid');
  quantityInput.nextElementSibling.textContent = 'Quantity is required.';
  quantityInput.focus();
  return;
}

// Validate Sizes Available
if (sizesInput.value.trim() === '') {
  sizesInput.classList.add('is-invalid');
  sizesInput.nextElementSibling.textContent = 'Sizes Available is required.';
  sizesInput.focus();
  return;
}

// Submit the form if all fields are valid
form.submit();

</script>